.. _php_symfony:

Developer Guide - PHP/Symfony Server 
====================================

This HowTo describes step by step how to use `MapFish <http://www.mapfish.org/>`_ Server Framework to set up a MapFish project. A MapFish project defines Web Services on which MapFish Client components can rely. `See here <http://trac.mapfish.o
rg/trac/mapfish/wiki/MapFishProtocol>`_ for a description of the interfaces provided by MapFish Web Services.

The Mapfish server for PHP is implemented as a plugin for the `symfony <http://www.symfony-project.org/>`_ framework.

Installation
------------

* Install the plugin:

  .. code-block:: php 

    symfony plugin:install sfMapFishPlugin

* Clear the cache:

  .. code-block:: php

    symfony cache:clear

* Build (or rebuild the model):

  .. code-block:: php

    symfony doctrine:build-model

Generate a MapFish controller
-----------------------------

It's quite simple to generate a module which exposes your geographic data through a RESTful API, via the `MapFish Protocol <http://trac.mapfish.org/trac/mapfish/wiki/MapFishProtocol>`_. 

Say you want to be able to CREATE/READ/UPDATE/DELETE geographic features in a table with a geographic column. 
Just follow these three easy steps:

* In lib/model/doctrine/YourModelClass.php, specify your table's geometric column name and its `EPSG code <http://spatialreference.org>`_, by adding such a line:

  .. code-block:: php

    public static $geometryColumn = array('the_geom' => 4326);   
 
  Here, we have a table with a geometric column whose name is 'the_geom', and its projection code is `EPSG:4326 <http://spatialreference.org/ref/epsg/4326/>`_

* Make YourModelTable extend sfMapFishTable instead of Doctrine_Table: in lib/model/doctrine/YourModelTableClass.php, you should have:

  .. code-block:: php

    YourModelTable extends sfMapFishTable
        
* Unset the geometric column from the configure method of the form in lib/form/doctrine/YourModelForm.class.php:

  .. code-block:: php

    unset($this['the_geom']);
        
* You're now ready to generate a MapFish module tied to this Model, by the way of the mapfish:generate-module built-in task::
  
  ./symfony mapfish:generate-module --generate-route frontend your_module YourModel

  The --generate-route will update the routing.yml file for the frontend application, by adding the corresponding sfMapFishRoute.
  In this example, the resulting module will be named "your_module". You may want to customize this !
      
Once this is done, clear your cache, and check you've got some GeoJSON data out of /index.php/your_module

This being done, you may want to have a look at MapFish client side software, which plays well with this REST API.
Just check out http://www.mapfish.org/svn/mapfish/trunk/MapFish/client/mfbase/ into your project's web/js directory, and `read the doc <http://dev.mapfish.org/sandbox/website/.build/html/index.html>`_ or `browse the examples <http://demo.mapfish.org/mapfishsample/trunk/>`_ ;-)

For quick CRUD operations on your data, you can take advantage of the existing mapfish.widgets.editing.FeatureEditingPanel widget, which is being showcased `here <http://demo.mapfish.org/mapfishsample/trunk/examples/editing/>`_.

In case of problems, feel free to drop us a line on the dedicated `MapFish mailing list, or IRC <http://trac.mapfish.org/trac/mapfish/wiki/Community>`_

Install print module
--------------------

sfMapFishPlugin comes with a built-in controller for the `MapFish print protocol <http://trac.mapfish.org/trac/mapfish/wiki/PrintModuleDoc#Protocol>`_, which you can optionally activate if you want your app to produce nice PDF with your maps. (see `MapFish PrintModuleDoc <https://trac.mapfish.org/trac/mapfish/wiki/PrintModuleDoc>`_)

You'll need to have `Sun's JRE <http://www.java.com/download/>`_ installed to make this working.

* Enable this module in your app

  .. code-block:: yaml

    all:
      .settings:
         enabled_modules:  [default, mfPrint]

* Copy the mandatory config file from the plugin to your config directory:

  .. code-block:: php
  
    cp plugins/sfMapFishPlugin/data/print/print.yml config/print.yml

* The print module should be ready & responding to /index.php/mfPrint/info to get print configuration. 
  Don't forget to configure the config.yml (see `configuration <https://trac.mapfish.org/trac/mapfish/wiki/PrintModuleServer>`_. For instance, you should at least allow the print service to access the WMS services you're using.
  The provided print.yml example fiel has 3 mandatory fields in the spec: title, comment & mapTitle. 
  If you're getting errors, check your symfony log file to get debug information (if enabled in your application environment).
    
* Once this is done, you can integrate the `MapFish print widgets <http://www.mapfish.org/svn/mapfish/trunk/MapFish/client/mfbase/mapfish/widgets/print/>`_ into your client application, which give you the ability to output nice customizable PDF with your maps. Examples can be `found here <http://demo.mapfish.org/mapfishsample/trunk/examples/print/>`_.

* Troubleshooting: You may need to manually set the java path to get it working:

  .. code-block:: php
  
    sfConfig::set('mf_jre_path', '/usr/bin/');


Documentation
-------------

All classes have full API documentation.

You will also find some information on the MapFish website:

* `MapFish Wiki  <http://trac.mapfish.org/trac/mapfish/wiki>`_
* `Definition of the MapFish Protocol <http://trac.mapfish.org/trac/mapfish/wiki/Releases/1.2/MapFishProtocol>`_



How to contribute.
------------------

If you want to contribute, follow these steps:

* Check the prerequisites
    * The license must be BSD
    * You must follow symfony coding standards
    * The contribution must not be too specific
    * You must be sure you will be able to maintain your contribution
* Create a ticket and attach a patch
    * Choose `sfMapFishPlugin` as the component
    * Change the qualification to `Ready for core team`

License
-------

This plugin is realeased under a BSD license.


